# security:
#     # Configuration du hashage des mots de passe
#     password_hashers:
#         App\Entity\Employee:
#             algorithm: auto


#     # Définition de la hiérarchie des rôles
#     role_hierarchy:
#         ROLE_ADMIN: [ROLE_USER, ROLE_VETERINARY, ROLE_KEEPER]
#         ROLE_VETERINARY: [ROLE_USER]
#         ROLE_KEEPER: [ROLE_USER]

#     # Configuration du fournisseur d'utilisateurs
#     providers:
#         app_user_provider:
#             entity:
#                 class: App\Entity\Employee
#                 property: email
#         # used to reload user from session & other features (e.g. switch_user)

#     firewalls:
#         dev:
#             pattern: ^/(_(profiler|wdt)|css|images|js)/ 
#             security: false

#         main:
#             lazy: true
#             provider: app_user_provider
#             #entry_point: App\Security\LoginFormAuthenticator
#             form_login:
#                 login_path: app_login
#                 check_path: app_login
#                 enable_csrf: true
#                 default_target_path: /dashboard
#             logout:
#                 path: app_logout
#                 target: app_login
#             remember_me:
#                 secret: '%kernel.secret%'
#                 lifetime: 604800
#                 path: /
#                 always_remember_me: true
#             custom_authenticator: App\Security\LoginFormAuthenticator

#     # Gestion des accès aux routes
#     access_control:
#         - { path: ^/admin, roles: ROLE_ADMIN }
#         - { path: ^/veterinary, roles: ROLE_VETERINARY }
#         - { path: ^/keeper, roles: ROLE_KEEPER }
#         - { path: ^/dashboard, roles: ROLE_USER }
#         - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                username_parameter: email
                password_parameter: password
                enable_csrf: false
                default_target_path : /
                always_use_default_target_path: false
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
